# "A Compiler You Can Understand"

## Introduction

**A Compiler You Can Understand** is a compiler project designed to compile and run source code written in a simplified programming language. This readme provides instructions on how to compile and run the compiler, as well as outlining its assumptions and expected behavior.

## Compile & Run Instructions

To compile and run the compiler, follow these steps:

1. Compile the compiler by entering the following commands in the terminal:
    - `lex cucu.l`
    - `yacc -d cucu.y`
    - `cc lex.yy.c y.tab.c -lfl`
    - Alternatively, run `bash run`. #but change the input file name in "run.txt"

2. After compilation, you can run the compiler by executing:
    - `./a.out <filename>`

## Assumptions

The compiler operates based on the following assumptions:

- Conditional and loop statements must have statements enclosed in curly brackets to handle dangling else.
- The "else if" construct is not allowed.
- There are no "for" loops.
- Increment and decrement operators are not allowed.
- Bitwise operators are not allowed.
- The modulo operator is not supported.
- Only two data types, "int" and "char*", are supported.
- Single-line comments are not allowed.
- Outside of a function, only variable declaration/definition and function declaration/definition are allowed.
- Functions cannot be defined inside another function.

## Expected Output

When running the compiler on a file, it generates two output files:

- `Lexer.txt`: Contains token information generated by the lexer.
- `Parser.txt`: Contains structural information extracted by the compiler from the input file.

## Conclusion

This readme provides a formal guide on how to compile and run the "A Compiler You Can Understand" project, along with its assumptions and expected behavior. Users can follow these instructions to utilize the compiler for compiling source code written in the specified programming language.